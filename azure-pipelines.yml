name: 2.1.$(devops_buildNumber)

pr:
  branches:
    include:
    - master
    - dev
    - v3.x

trigger:
  branches:
    include:
    - dev
    - master

pool:
  vmImage: 'vs2017-win2016'

variables:
  devops_buildNumber: $[counter(format(''), 1500)]

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'
  
- task: OneLocBuild@2
  enabled: false
  inputs:
    locProj: 'Build\Localize\LocProject.json'
    outDir: '$(Build.Repository.LocalPath)'
    packageSourceAuth: 'patAuth'
    patVariable: '$(ONELOCBUILD)'
    continueOnError: true
- task: CopyFiles@2
  enabled: false
  displayName: 'Copy Loc files to publish directories'
  inputs:
    SourceFolder: $(System.DefaultWorkingDirectory)/loc
    TargetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  enabled: false
  displayName: 'Publish Artifact: loc'
  inputs:
    ArtifactName: 'loc'
    
- task: Npm@1
  inputs:
    command: 'install'
    workingDir: '.\Build'
  
- task: Gulp@1
  inputs:
    buildNumber: $(devops_buildNumber)
    gulpFile: '.\Build\gulpfile.js'
    targets: 'build-all'
    enableCodeCoverage: false
  
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.Repository.LocalPath)\bin\VS'
    Contents: '*.nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    CleanTargetFolder: true
  
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.Repository.LocalPath)\bin'
    Contents: '*.zip'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    CleanTargetFolder: false

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      function GenerateIndexJson($ctx, $bundleVersion, $fileRelativePath, $rootPath)
      {
      $filePath = Join-Path -Path $rootPath -ChildPath $fileRelativePath
      
      $json = @"   
          {
              "version": "$BundleV1Template",
              "commitId" : "$(Build.SourceVersion)"
          }
      "@
      
          $json | Out-File -FilePath $filePath -Encoding ascii
          $blobName = "ExtensionBundleTemplates\build\latest\" + $fileRelativePath
          Set-AzureStorageBlobContent -Container "public" -File $filePath -Blob $blobName -Context $ctx -Force
      }
      
      # get the build version
      $BundleV1Template = "1.0." + $env:devops_buildNumber
      $BundleV2Template = "2.0." + $env:devops_buildNumber
      $BundleV3Template = "3.0." + $env:devops_buildNumber
      
      $rootPath = $pwd
      
      # Storage Context
      $ctx = New-AzureStorageContext -StorageAccountName "$(ACCOUNT_NAME)" -SasToken "$(ACCOUNT_KEY)"
      
      $fileName = "v1\latest\versions.json" 
      GenerateIndexJson $ctx $BundleV1Template $fileName $rootPath
      
      $fileName = "v2\latest\versions.json" 
      GenerateIndexJson $ctx $BundleV2Template $fileName $rootPath
      
      $fileName = "v3\latest\versions.json" 
      GenerateIndexJson $ctx $BundleV3Template $fileName $rootPath

      $files= Get-ChildItem -Recurse -Path "$(System.ArtifactsDirectory)"
      foreach($file in $files)
      {
          $fileName = $file.FullName.ToLower();
          if  ($fileName.Endswith(".zip") -and !$fileName.Contains("bundle"))
          {
              $fileFullName = $file.FullName
              $blobName = "TemplatesApi\" + $file.Name
              Write-Host "Uploading file:$fileFullName"
              Set-AzureStorageBlobContent -Container "public" -File $fileFullName -Blob $blobName -Context $ctx
          }

          if  ($fileName.Endswith(".zip") -and $fileName.Contains("bundle"))
          {
              $fileFullName = $file.FullName
              $blobName = "ExtensionBundleTemplates\" + $file.Name
              Write-Host "Uploading file:$fileFullName"
              Set-AzureStorageBlobContent -Container "public" -File $fileFullName -Blob $blobName -Context $ctx
          }
      }
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'